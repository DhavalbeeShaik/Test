name: CI/CD Pipeline (Shell Script Edition)

on:
  pull_request:
    branches: [ master ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  approval:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for Approvals
        uses: actions/github-script@v6
        id: check_approvals
        with:
          script: |
            const github = require('@actions/github');
            const context = github.context;
            const octokit = github.getOctokit(process.env.GITHUB_TOKEN);

            async function getApprovals() {
              const { data: reviews } = await octokit.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
              });

              let approvals = 0;
              const approvingUsers = new Set();

              for (const review of reviews) {
                  if (review.state === 'APPROVED' && review.user && !approvingUsers.has(review.user.login)) {
                      // Check if the user has write access
                      const { data: permission } = await octokit.rest.repos.getCollaboratorPermissionLevel({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          username: review.user.login,
                      });

                      if (permission.permission === 'write' || permission.permission === 'admin') {
                        approvals++;
                        approvingUsers.add(review.user.login);
                      }
                  }
              }

              console.log(`Found ${approvals} approvals from users with write access.`);
              return approvals;
            }

            const approvals = await getApprovals();

            if (approvals < 2) {
              console.log('Insufficient approvals. Failing the job.');
              core.setFailed('Insufficient approvals.  At least two approvals from users with write access are required.');
            } else {
              console.log('Sufficient approvals received.');
            }

  security_checks:
    needs: approval
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for SonarQube

      - name: SonarQube Scan
        run: |
          # Install SonarScanner
          echo "Installing SonarScanner..."
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          sudo mv sonar-scanner-cli-5.0.1.3006-linux /opt/sonar-scanner
          sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner

          # Run SonarQube Scan
          echo "Running SonarQube Scan..."
          sonar-scanner \
            -Dsonar.projectKey=your-project-key \
            -Dsonar.sources=. \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Snyk Scan
        run: |
          # Install Snyk
          echo "Installing Snyk..."
          curl -sSL https://static.snyk.io/install.sh | sudo bash

          # Run Snyk Scan
          echo "Running Snyk Scan..."
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test
          snyk monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: DAST Scan (OWASP ZAP)
        run: |
          set -e  # Exit immediately on error

          # Install OWASP ZAP (example for Ubuntu)
          echo "Installing ZAP..."
          sudo apt-get update
          sudo apt-get install -y zaproxy

          # Start ZAP in daemon mode (headless)
          echo "Starting ZAP Daemon..."
          zap.sh -daemon -port 8080 -host localhost -config api.key=${{ secrets.DAST_API_KEY }} &

          # Give ZAP time to start (adjust as needed)
          echo "Waiting for ZAP to start..."
          sleep 10

          # Run ZAP spider to explore the application. Replace with your app URL!
          echo "Running ZAP Spider..."
          zap-cli -d --api-key ${{ secrets.DAST_API_KEY }} spider -t http://localhost:8080/your-application &

          # Run ZAP active scan (after spider)
          echo "Running ZAP Active Scan..."
          zap-cli -d --api-key ${{ secrets.DAST_API_KEY }} active-scan -t http://localhost:8080/your-application &

          # Wait for scans to complete (using background process)
          echo "Waiting for ZAP scans to complete..."
          wait

          # Generate a report
          echo "Generating ZAP report..."
          zap-cli -d --api-key ${{ secrets.DAST_API_KEY }} report -o zap-report.html

          # Check for High-Risk Vulnerabilities in the Report
          echo "Checking for high-risk vulnerabilities..."
          if grep -q "High" zap-report.html; then
            echo "High-risk vulnerabilities found!"
            exit 1  # Fail the job
          else
            echo "No high-risk vulnerabilities detected."
          fi
        env:
          DAST_API_KEY: ${{ secrets.DAST_API_KEY }}

  build_and_package:    
    needs: security_checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17' # Or your desired Java version
          distribution: 'temurin'

      - name: Maven Build
        run: |
          set -e # Exit immediately on error
          echo "Building with Maven..."
          mvn clean install -DskipTests # Build the project

      - name: Package Artifact
        run: |
          set -e # Exit immediately on error
          echo "Packaging artifact..."
          mvn package # Package the project
      - name: Store Artifact Name
        id: artifact_name
        run: |
          set -e # Exit immediately on error
          ARTIFACT_NAME=$(ls target/*.jar)
          echo "::set-output name=name::$ARTIFACT_NAME"

  artifact_deployment:
    needs: build_and_package
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact Name
        uses: actions/checkout@v3 # necessary if you have a build step that runs in a separate job
        with:
          fetch-depth: 0 # Required for SonarQube

      - name: Deploy to JFrog Artifactory
        run: |
          set -e # Exit immediately on error
          echo "Deploying to JFrog Artifactory..."

          # Download the artifact to the runner
          ARTIFACT_PATH=$(ls target/*.jar) # Find the artifact in the target directory

          ARTIFACT_URL="https://your-jfrog-url/artifactory/your-repo-key/your/artifact/path/${ARTIFACT_PATH}"  # Replace

          curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }}" -T ${ARTIFACT_PATH} $ARTIFACT_URL

        env:
          JFROG_URL: ${{ secrets.JFROG_URL }}
          JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
          JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
  aws_inspector:
    needs: artifact_deployment
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact from JFrog
        run: |
          set -e
          echo "Downloading artifact..."
          ARTIFACT_URL="https://your-jfrog-url/artifactory/your-repo-key/your/artifact/path/your.jar" # Replace with the correct URL
          curl -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }}" -O "$ARTIFACT_URL"
          ARTIFACT_NAME=$(basename "$ARTIFACT_URL")
          echo "Downloaded artifact: $ARTIFACT_NAME"
        env:
          JFROG_URL: ${{ secrets.JFROG_URL }}
          JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
          JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}

      - name: AWS Inspector Scan
        run: |
          set -e
          echo "Running AWS Inspector Scan..."
          sudo apt-get update
          sudo apt-get install -y awscli
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

          # Ensure artifact name is properly set
          ARTIFACT_NAME=$(basename "$ARTIFACT_URL")
          aws inspector2 scan --scan-type CODE --resource-id "$ARTIFACT_NAME"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

  automation_tests:
    needs: aws_inspector
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17' # Or your desired Java version
          distribution: 'temurin'

      - name: Run Automated Tests
        run: |
          # Assumes tests are in a directory called "tests" and uses Maven
          # Adjust the command according to your test framework (e.g., JUnit, TestNG, etc.)
          echo "Running automated tests..."
          mvn test -f tests/pom.xml
